package DSA.journey.TwoPointers;

public class Array3Pointers {
    public static void main(String[] args) {
        int a[]={1, 4, 10};
        int b[]={2, 15, 20};
        int c[]={10, 12};

//        int a[]={16, 47, 53, 93, 101, 131, 140, 140, 302, 320, 324, 330, 345, 362, 411, 416, 429, 437, 503, 555, 582, 587, 598, 640, 748, 760, 783, 802, 919, 1063, 1078, 1121, 1134, 1141, 1164, 1171, 1195, 1202, 1207, 1244, 1277, 1278, 1281, 1301, 1334, 1336, 1347, 1358, 1361, 1412, 1563, 1565, 1595, 1700, 1729, 1807, 1836, 1872, 1891, 1908, 2109, 2126, 2158, 2175, 2179, 2183, 2235, 2238, 2239, 2331, 2341, 2350, 2352, 2353, 2408, 2448, 2464, 2512, 2575, 2586, 2650, 2695, 2703, 2705, 2711, 2738, 2811, 2843, 2851, 2932, 3001, 3005, 3006, 3023, 3083, 3110, 3153, 3170, 3202, 3220, 3249, 3251, 3276, 3310, 3335, 3418, 3444, 3472, 3486, 3489, 3582, 3606, 3624, 3631, 3671, 3676, 3692, 3795, 3812, 3847, 3848, 3856, 3857, 3900, 3927, 4020, 4022, 4053, 4078, 4084, 4143, 4182, 4191, 4236, 4260, 4264, 4293, 4328, 4352, 4474, 4481, 4503, 4536, 4577, 4595, 4619, 4785, 4817, 4842, 4848, 4887, 4889, 4903, 4907, 4944, 4988, 4992, 5057, 5064, 5072, 5072, 5148, 5150, 5158, 5264, 5348, 5401, 5403, 5421, 5440, 5461, 5481, 5514, 5537, 5577, 5593, 5606, 5651, 5698, 5714, 5722, 5729, 5772, 5817, 5857, 5907, 5914, 5916, 5968, 5982, 5992, 6049, 6071, 6083, 6088, 6120, 6128, 6165, 6238, 6314, 6342, 6360, 6387, 6398, 6413, 6420, 6443, 6458, 6518, 6523, 6540, 6558, 6620, 6664, 6665, 6692, 6717, 6723, 6781, 6826, 6889, 7043, 7061, 7130, 7139, 7145, 7178, 7290, 7336, 7336, 7364, 7385, 7401, 7438, 7531, 7570, 7578, 7608, 7609, 7612, 7658, 7727, 7752, 7768, 7803, 7865, 7867, 7873, 7911, 7937, 7962, 7993, 8018, 8026, 8027, 8037, 8051, 8056, 8089, 8094, 8099, 8114, 8128, 8144, 8153, 8158, 8178, 8234, 8255, 8281, 8360, 8426, 8442, 8516, 8518, 8528, 8535, 8560, 8657, 8687, 8688, 8721, 8729, 8730, 8766, 8772, 8816, 8839, 8881, 8925, 8985, 9019, 9025, 9061, 9148, 9234, 9255, 9255, 9266, 9304, 9338, 9345, 9437, 9453, 9473, 9496, 9531, 9576, 9579, 9657, 9670, 9678, 9742, 9770, 9832, 9843, 9851, 9892, 9946, 9960, 9998};
//
//        int b[]={ 27, 35, 76, 95, 131, 229, 237, 285, 312, 359, 361, 375, 385, 389, 423, 439, 445, 570, 571, 648, 675, 726, 826, 915, 916, 920, 959, 1001, 1002, 1025, 1028, 1059, 1192, 1204, 1292, 1305, 1343, 1349, 1356, 1363, 1376, 1403, 1414, 1459, 1487, 1513, 1528, 1550, 1565, 1588, 1611, 1703, 2087, 2099, 2107, 2123, 2134, 2151, 2175, 2179, 2283, 2324, 2385, 2441, 2472, 2492, 2563, 2573, 2587, 2599, 2619, 2674, 2743, 2759, 2777, 2801, 2805, 2823, 2829, 2848, 2861, 2912, 2953, 3009, 3015, 3018, 3025, 3063, 3087, 3121, 3161, 3164, 3208, 3228, 3260, 3279, 3281, 3299, 3314, 3341, 3344, 3381, 3388, 3425, 3439, 3501, 3542, 3565, 3580, 3616, 3625, 3667, 3692, 3700, 3709, 3761, 3770, 3846, 3872, 3883, 3924, 3930, 3934, 3952, 3964, 4052, 4084, 4097, 4139, 4157, 4171, 4300, 4356, 4434, 4500, 4503, 4594, 4663, 4706, 4735, 4737, 4752, 4753, 4754, 4812, 4826, 4859, 4870, 4874, 4907, 4949, 4973, 5024, 5026, 5087, 5093, 5101, 5119, 5205, 5214, 5226, 5245, 5258, 5279, 5306, 5329, 5341, 5356, 5369, 5376, 5401, 5434, 5492, 5539, 5539, 5549, 5550, 5574, 5607, 5608, 5622, 5640, 5659, 5668, 5673, 5680, 5705, 5718, 5758, 5761, 5788, 5807, 5848, 5868, 5921, 5923, 5926, 5930, 5935, 5943, 5982, 5997, 6003, 6046, 6082, 6106, 6128, 6174, 6195, 6238, 6278, 6291, 6312, 6324, 6352, 6353, 6381, 6414, 6433, 6437, 6438, 6446, 6481, 6490, 6545, 6551, 6553, 6572, 6600, 6639, 6646, 6659, 6662, 6673, 6791, 6815, 6863, 6921, 6940, 6985, 6989, 7033, 7055, 7066, 7090, 7093, 7118, 7122, 7183, 7206, 7229, 7230, 7258, 7264, 7290, 7291, 7335, 7337, 7366, 7383, 7401, 7447, 7481, 7485, 7635, 7641, 7702, 7780, 7795, 7820, 7835, 7850, 7855, 7900, 7906, 7916, 7940, 7948, 7982, 8002, 8047, 8049, 8063, 8068, 8103, 8140, 8192, 8243, 8268, 8294, 8305, 8306, 8333, 8337, 8342, 8357, 8410, 8420, 8466, 8523, 8542, 8601, 8653, 8657, 8661, 8666, 8668, 8669, 8675, 8686, 8693, 8709, 8724, 8744, 8744, 8775, 8804, 8819, 8879, 8881, 8911, 8914, 8919, 8925, 8945, 8959, 8969, 8979, 8980, 9006, 9009, 9025, 9040, 9072, 9100, 9121, 9126, 9142, 9156, 9175, 9175, 9181, 9199, 9335, 9346, 9364, 9375, 9383, 9397, 9410, 9423, 9440, 9463, 9467, 9566, 9614, 9619, 9634, 9659, 9679, 9769, 9800, 9826, 9847, 9857, 9864, 9882, 9924, 9927, 9952, 9960, 9962, 9985};
//        int c[]={ 12, 1136, 1344, 1535, 1856, 2625, 3047, 3560, 3759, 3804, 4013, 4996, 5254, 5395, 5425, 5678, 6595, 7119, 7935, 8241, 9050 };
//
        System.out.println(new Array3Pointers().minimize(a,b,c));
    }
    public int minimize(final int[] A, final int[] B, final int[] C) {
        int min1=Integer.MAX_VALUE;
        int min2=Integer.MAX_VALUE;
        int min3=Integer.MAX_VALUE;
        int finalMin=0;
        for(int i=0;i<A.length;i++){

            int a=A[i];
            int closeB=BS(0,B.length-1,B,a);
            int closeC=BS(0,C.length-1,C,a);
            int max=Math.max(Math.abs(a-closeB),Math.max(Math.abs(closeB-closeC),Math.abs(closeC-a)));
            min1=Math.min(min1,max);

        }
        for(int i=0;i<B.length;i++){

            int b=B[i];
            int closeA=BS(0,A.length-1,A,b);
            int closeC=BS(0,C.length-1,C,b);
            int max=Math.max(Math.abs(b-closeA),Math.max(Math.abs(closeA-closeC),Math.abs(closeC-b)));
            min2=Math.min(min2,max);

        }
        for(int i=0;i<C.length;i++){

            int c=C[i];
            int closeA=BS(0,A.length-1,A,c);
            int closeB=BS(0,B.length-1,B,c);
            int max=Math.max(Math.abs(c-closeA),Math.max(Math.abs(closeA-closeB),Math.abs(closeB-c)));
            min3=Math.min(min3,max);

        }
        return Math.min(min1,Math.min(min2,min3));


    }

    public int BS(int low,int high,int []nums,int target){
        int min=Integer.MAX_VALUE;
        int index=-1;
        int mid=0;
        while(low<=high){
            mid=(low+(high-low)/2);
            int diff=Math.abs(nums[mid]-target);
            if(diff<min){
                min=diff;
                index=mid;
            }
            if(nums[mid]==target){
                return nums[mid];
            }
            else if(nums[mid]>target){
                high=mid-1;
            }
            else{
                low=mid+1;
            }
        }

       return nums[index];
    }
}
